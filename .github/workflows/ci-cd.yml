name: CI-CD Terraform + Lambda deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install deps & Run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pytest -q

      - name: Package Lambda
        run: |
          chmod +x scripts/package_lambda.sh
          bash scripts/package_lambda.sh

      - name: Upload lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zip
          path: build/processor.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate & Plan
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform validate || true
          terraform plan -out=tfplan || true

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  deploy:
    needs: build-and-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download terraform plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Download lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip

      - name: Setup AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Apply
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          terraform init
          terraform apply -auto-approve tfplan

      - name: Deploy Lambda (update or create)
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          unzip -o lambda-zip/processor.zip -d lambda_build || true
          if aws lambda get-function --function-name event_processor >/dev/null 2>&1; then
            aws lambda update-function-code --function-name event_processor --zip-file fileb://lambda-zip/processor.zip --region $AWS_REGION
          else
            aws lambda create-function --function-name event_processor --zip-file fileb://lambda-zip/processor.zip --handler lambda_fn.processor.handler --runtime python3.10 --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} --region $AWS_REGION
          fi
